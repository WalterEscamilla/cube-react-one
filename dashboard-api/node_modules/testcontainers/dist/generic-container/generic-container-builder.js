"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericContainerBuilder = void 0;
const pull_policy_1 = require("../pull-policy");
const uuid_1 = require("../uuid");
const reaper_1 = require("../reaper");
const docker_image_name_1 = require("../docker-image-name");
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
const dockerfile_parser_1 = require("../dockerfile-parser");
const build_image_1 = require("../docker/functions/image/build-image");
const image_exists_1 = require("../docker/functions/image/image-exists");
const registry_auth_locator_1 = require("../registry-auth-locator");
const generic_container_1 = require("./generic-container");
class GenericContainerBuilder {
    constructor(context, dockerfileName, uuid = new uuid_1.RandomUuid()) {
        this.context = context;
        this.dockerfileName = dockerfileName;
        this.uuid = uuid;
        this.buildArgs = {};
        this.pullPolicy = new pull_policy_1.DefaultPullPolicy();
    }
    withBuildArg(key, value) {
        this.buildArgs[key] = value;
        return this;
    }
    withPullPolicy(pullPolicy) {
        this.pullPolicy = pullPolicy;
        return this;
    }
    build(image = `${this.uuid.nextUuid()}:${this.uuid.nextUuid()}`) {
        return __awaiter(this, void 0, void 0, function* () {
            const imageName = docker_image_name_1.DockerImageName.fromString(image);
            yield reaper_1.ReaperInstance.getInstance();
            const dockerfile = path_1.default.resolve(this.context, this.dockerfileName);
            logger_1.log.debug(`Preparing to build Dockerfile: ${dockerfile}`);
            const imageNames = yield dockerfile_parser_1.getDockerfileImages(dockerfile);
            const registryConfig = yield this.getRegistryConfig(imageNames);
            yield build_image_1.buildImage({
                imageName: imageName,
                context: this.context,
                dockerfileName: this.dockerfileName,
                buildArgs: this.buildArgs,
                pullPolicy: this.pullPolicy,
                registryConfig,
            });
            const container = new generic_container_1.GenericContainer(imageName.toString());
            if (!(yield image_exists_1.imageExists(imageName))) {
                throw new Error("Failed to build image");
            }
            return Promise.resolve(container);
        });
    }
    getRegistryConfig(imageNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const authConfigs = [];
            yield Promise.all(imageNames.map((imageName) => __awaiter(this, void 0, void 0, function* () {
                const authConfig = yield registry_auth_locator_1.getAuthConfig(imageName.registry);
                if (authConfig !== undefined) {
                    authConfigs.push(authConfig);
                }
            })));
            return authConfigs
                .map((authConfig) => {
                return {
                    [authConfig.registryAddress]: {
                        username: authConfig.username,
                        password: authConfig.password,
                    },
                };
            })
                .reduce((prev, next) => (Object.assign(Object.assign({}, prev), next)), {});
        });
    }
}
exports.GenericContainerBuilder = GenericContainerBuilder;

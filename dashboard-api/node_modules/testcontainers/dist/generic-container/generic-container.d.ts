/// <reference types="node" />
import archiver from "archiver";
import { BoundPorts } from "../bound-ports";
import { Port } from "../port";
import { PullPolicy } from "../pull-policy";
import { StartedTestContainer, TestContainer } from "../test-container";
import { WaitStrategy } from "../wait-strategy";
import { Readable } from "stream";
import { BindMode, BindMount, BuildContext, Command, ContainerName, Dir, Env, EnvKey, EnvValue, HealthCheck, NetworkMode, TmpFs } from "../docker/types";
import { GenericContainerBuilder } from "./generic-container-builder";
export declare class GenericContainer implements TestContainer {
    readonly image: string;
    static fromDockerfile(context: BuildContext, dockerfileName?: string): GenericContainerBuilder;
    private readonly imageName;
    protected env: Env;
    protected networkMode?: NetworkMode;
    protected networkAliases: string[];
    protected ports: Port[];
    protected cmd: Command[];
    protected bindMounts: BindMount[];
    protected name?: ContainerName;
    protected tmpFs: TmpFs;
    protected healthCheck?: HealthCheck;
    protected waitStrategy?: WaitStrategy;
    protected startupTimeout: number;
    protected useDefaultLogDriver: boolean;
    protected privilegedMode: boolean;
    protected ipcMode?: string;
    protected user?: string;
    protected pullPolicy: PullPolicy;
    protected tarToCopy?: archiver.Archiver;
    private extraHosts;
    constructor(image: string);
    start(): Promise<StartedTestContainer>;
    withCmd(cmd: Command[]): this;
    withName(name: ContainerName): this;
    withEnv(key: EnvKey, value: EnvValue): this;
    withTmpFs(tmpFs: TmpFs): this;
    withNetworkMode(networkMode: NetworkMode): this;
    withNetworkAliases(...networkAliases: string[]): this;
    withExposedPorts(...ports: Port[]): this;
    withBindMount(source: Dir, target: Dir, bindMode?: BindMode): this;
    withHealthCheck(healthCheck: HealthCheck): this;
    withStartupTimeout(startupTimeout: number): this;
    withWaitStrategy(waitStrategy: WaitStrategy): this;
    withDefaultLogDriver(): this;
    withPrivilegedMode(): this;
    withUser(user: string): this;
    withPullPolicy(pullPolicy: PullPolicy): this;
    withIpcMode(ipcMode: string): this;
    withCopyFileToContainer(sourcePath: string, containerPath: string): this;
    withCopyContentToContainer(content: string | Buffer | Readable, containerPath: string): this;
    protected getTarToCopy(): archiver.Archiver;
    protected preCreate?(boundPorts: BoundPorts): Promise<void>;
    private waitForContainer;
    private getWaitStrategy;
}

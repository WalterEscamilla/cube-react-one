/// <reference types="node" />
import { StartedTestContainer, StopOptions, StoppedTestContainer } from "../test-container";
import Dockerode from "dockerode";
import { Command, ContainerName, ExecResult, Host, Id as ContainerId } from "../docker/types";
import { InspectResult } from "../docker/functions/container/inspect-container";
import { BoundPorts } from "../bound-ports";
import { Port } from "../port";
import { Readable } from "stream";
export declare class StartedGenericContainer implements StartedTestContainer {
    private readonly container;
    private readonly host;
    private readonly inspectResult;
    private readonly boundPorts;
    private readonly name;
    constructor(container: Dockerode.Container, host: Host, inspectResult: InspectResult, boundPorts: BoundPorts, name: ContainerName);
    stop(options?: Partial<StopOptions>): Promise<StoppedTestContainer>;
    private stopContainer;
    getHost(): Host;
    getMappedPort(port: Port): Port;
    getId(): ContainerId;
    getName(): ContainerName;
    getNetworkNames(): string[];
    getNetworkId(networkName: string): string;
    getIpAddress(networkName: string): string;
    exec(command: Command[]): Promise<ExecResult>;
    logs(): Promise<Readable>;
}

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dockerComposeUp = void 0;
const logger_1 = require("../../logger");
const docker_compose_1 = require("docker-compose");
const default_docker_compose_options_1 = require("../default-docker-compose-options");
const docker_compose_down_1 = require("./docker-compose-down");
const dockerComposeUp = (options) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.log.info(`Upping DockerCompose environment`);
    try {
        yield docker_compose_1.upAll(default_docker_compose_options_1.defaultDockerComposeOptions(options));
        logger_1.log.info(`Upped DockerCompose environment`);
    }
    catch (err) {
        logger_1.log.error(`Failed to up DockerCompose environment: ${err}`);
        try {
            yield docker_compose_down_1.dockerComposeDown(options);
        }
        catch (_a) {
            logger_1.log.warn(`Failed to down DockerCompose environment after failed up`);
        }
        throw new Error(err);
    }
});
exports.dockerComposeUp = dockerComposeUp;

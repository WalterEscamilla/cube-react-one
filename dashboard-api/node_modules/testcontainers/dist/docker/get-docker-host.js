"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDockerHost = void 0;
const logger_1 = require("../logger");
const run_in_container_1 = require("./functions/run-in-container");
const fs_1 = __importDefault(require("fs"));
const DEFAULT_HOST = "localhost";
const getDockerHost = (dockerode) => __awaiter(void 0, void 0, void 0, function* () {
    if (process.env.DOCKER_HOST) {
        logger_1.log.info(`Detected DOCKER_HOST environment variable: ${process.env.DOCKER_HOST}`);
    }
    for (const hostStrategy of hostStrategies(dockerode)) {
        const result = yield hostStrategy();
        if (result && result.host) {
            result.callback();
            return result.host;
        }
    }
    logger_1.log.info(`Using fallback Docker host: ${DEFAULT_HOST}`);
    return DEFAULT_HOST;
});
exports.getDockerHost = getDockerHost;
const hostStrategies = (dockerode) => [
    () => __awaiter(void 0, void 0, void 0, function* () {
        const host = dockerode.modem.host;
        return { host, callback: () => logger_1.log.info(`Using Docker host from modem: ${host}`) };
    }),
    () => __awaiter(void 0, void 0, void 0, function* () {
        const host = process.env["TESTCONTAINERS_HOST_OVERRIDE"];
        return { host, callback: () => logger_1.log.info(`Using TESTCONTAINERS_HOST_OVERRIDE: ${host}`) };
    }),
    () => __awaiter(void 0, void 0, void 0, function* () {
        if (!isInContainer()) {
            return { host: DEFAULT_HOST, callback: () => logger_1.log.info(`Using default Docker host: ${DEFAULT_HOST}`) };
        }
    }),
    () => __awaiter(void 0, void 0, void 0, function* () {
        const network = yield dockerode.getNetwork("bridge").inspect();
        if (!network.IPAM || !network.IPAM.Config) {
            return {
                host: DEFAULT_HOST,
                callback: () => logger_1.log.info(`Using default Docker host from within container: ${DEFAULT_HOST}`),
            };
        }
        const gateways = network.IPAM.Config.filter((config) => !!config.Gateway);
        if (gateways.length > 0) {
            const host = gateways[0].Gateway;
            return { host, callback: () => logger_1.log.info(`Using Docker host from network gateway within container: ${host}`) };
        }
    }),
    () => __awaiter(void 0, void 0, void 0, function* () {
        const host = yield run_in_container_1.runInContainer("alpine:3.5", ["sh", "-c", "ip route|awk '/default/ { print $3 }'"]);
        return { host, callback: () => logger_1.log.info(`Using Docker host from evaluated gateway within container: ${host}`) };
    }),
];
const isInContainer = () => fs_1.default.existsSync("/.dockerenv");

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNetwork = void 0;
const logger_1 = require("../../../logger");
const dockerode_1 = require("../../dockerode");
const create_labels_1 = require("../create-labels");
const createNetwork = (options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        logger_1.log.info(`Creating network ${options.name}`);
        const network = yield dockerode_1.dockerode.createNetwork({
            Name: options.name,
            CheckDuplicate: options.checkDuplicate,
            Driver: options.driver,
            Internal: options.internal,
            Attachable: options.attachable,
            Ingress: options.ingress,
            EnableIPv6: options.enableIPv6,
            Options: options.options,
            Labels: Object.assign(Object.assign({}, options.labels), create_labels_1.createLabels()),
        });
        return network.id;
    }
    catch (err) {
        logger_1.log.error(`Failed to create network: ${err}`);
        throw err;
    }
});
exports.createNetwork = createNetwork;

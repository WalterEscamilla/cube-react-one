"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execContainer = void 0;
const logger_1 = require("../../../logger");
const execContainer = (container, command) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const exec = yield container.exec({
            Cmd: command,
            AttachStdout: true,
            AttachStderr: true,
        });
        const stream = yield startExec(exec);
        return yield new Promise((resolve) => {
            const chunks = [];
            stream.on("data", (chunk) => chunks.push(chunk));
            const interval = setInterval(() => __awaiter(void 0, void 0, void 0, function* () {
                const { running, exitCode } = yield inspectExec(exec);
                if (!running) {
                    clearInterval(interval);
                    stream.destroy();
                    resolve({ output: chunks.join(""), exitCode });
                }
            }), 100);
        });
    }
    catch (err) {
        logger_1.log.error(`Failed to exec container ${container.id} with command "${command.join(" ")}": ${err}`);
        throw err;
    }
});
exports.execContainer = execContainer;
const startExec = (exec) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const options = {
            Detach: false,
            Tty: true,
            stream: true,
            stdin: true,
            stdout: true,
            stderr: true,
        };
        const stream = yield exec.start(options);
        stream.setEncoding("utf-8");
        return stream;
    }
    catch (err) {
        logger_1.log.error(`Failed to start exec: ${err}`);
        throw err;
    }
});
const inspectExec = (exec) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const inspectResult = yield exec.inspect();
        return {
            exitCode: inspectResult.ExitCode === null ? -1 : inspectResult.ExitCode,
            running: inspectResult.Running,
            entrypoint: inspectResult.ProcessConfig.entrypoint,
            arguments: inspectResult.ProcessConfig.arguments,
        };
    }
    catch (err) {
        logger_1.log.error(`Failed to inspect exec: ${err}`);
        throw err;
    }
});

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inspectContainer = void 0;
const logger_1 = require("../../../logger");
const inspectContainer = (container) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const inspectResult = yield container.inspect();
        return {
            hostPorts: getHostPorts(inspectResult),
            internalPorts: getInternalPorts(inspectResult),
            name: getName(inspectResult),
            healthCheckStatus: getHealthCheckStatus(inspectResult),
            networkSettings: getNetworkSettings(inspectResult),
            state: { status: inspectResult.State.Status, running: inspectResult.State.Running },
        };
    }
    catch (err) {
        logger_1.log.error(`Failed to inspect container ${container.id}: ${err}`);
        throw err;
    }
});
exports.inspectContainer = inspectContainer;
const getHostPorts = (inspectInfo) => Object.values(inspectInfo.NetworkSettings.Ports)
    .filter((portsArray) => portsArray !== null)
    .map((portsArray) => Number(portsArray[0].HostPort));
const getInternalPorts = (inspectInfo) => Object.keys(inspectInfo.NetworkSettings.Ports).map((port) => Number(port.split("/")[0]));
const getName = (inspectInfo) => inspectInfo.Name;
const getHealthCheckStatus = (inspectResult) => {
    const health = inspectResult.State.Health;
    if (health === undefined) {
        return "none";
    }
    else {
        return health.Status;
    }
};
const getNetworkSettings = (inspectResult) => Object.entries(inspectResult.NetworkSettings.Networks)
    .map(([networkName, network]) => ({
    [networkName]: {
        networkId: network.NetworkID,
        ipAddress: network.IPAddress,
    },
}))
    .reduce((prev, next) => (Object.assign(Object.assign({}, prev), next)), {});

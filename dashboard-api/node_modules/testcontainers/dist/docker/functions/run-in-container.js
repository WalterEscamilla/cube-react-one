"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runInContainer = void 0;
const logger_1 = require("../../logger");
const docker_image_name_1 = require("../../docker-image-name");
const dockerode_1 = require("../dockerode");
const pull_image_1 = require("./image/pull-image");
const start_container_1 = require("./container/start-container");
const attach_container_1 = require("./container/attach-container");
const inspect_container_1 = require("./container/inspect-container");
const runInContainer = (image, command) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const imageName = docker_image_name_1.DockerImageName.fromString(image);
        yield pull_image_1.pullImage({ imageName, force: false });
        logger_1.log.debug(`Creating container: ${image} with command: ${command.join(" ")}`);
        const container = yield dockerode_1.dockerode.createContainer({ Image: image, Cmd: command, HostConfig: { AutoRemove: true } });
        logger_1.log.debug(`Attaching to container: ${container.id}`);
        const stream = yield attach_container_1.attachContainer(container);
        const promise = new Promise((resolve) => {
            const interval = setInterval(() => __awaiter(void 0, void 0, void 0, function* () {
                const inspect = yield inspect_container_1.inspectContainer(container);
                if (inspect.state.status === "exited") {
                    clearInterval(interval);
                    stream.destroy();
                }
            }), 100);
            const chunks = [];
            stream.on("data", (chunk) => chunks.push(chunk));
            stream.on("end", () => {
                clearInterval(interval);
                resolve(chunks.join("").trim());
            });
        });
        logger_1.log.debug(`Starting container: ${container.id}`);
        yield start_container_1.startContainer(container);
        logger_1.log.debug(`Waiting for container output: ${container.id}`);
        const output = yield promise;
        if (output.length === 0) {
            return undefined;
        }
        else {
            return output;
        }
    }
    catch (err) {
        logger_1.log.error(`Failed to run command in container: "${command.join(" ")}", error: "${err}"`);
        return undefined;
    }
});
exports.runInContainer = runInContainer;

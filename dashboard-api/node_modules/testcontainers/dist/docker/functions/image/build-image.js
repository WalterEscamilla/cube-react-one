"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildImage = void 0;
const logger_1 = require("../../../logger");
const docker_ignore_1 = require("../../../docker-ignore");
const tar_fs_1 = __importDefault(require("tar-fs"));
const slash_1 = __importDefault(require("slash"));
const byline_1 = __importDefault(require("byline"));
const dockerode_1 = require("../../dockerode");
const create_labels_1 = require("../create-labels");
const buildImage = (options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        logger_1.log.info(`Building image '${options.imageName.toString()}' with context '${options.context}'`);
        const dockerIgnoreFiles = yield docker_ignore_1.findDockerIgnoreFiles(options.context);
        const tarStream = tar_fs_1.default.pack(options.context, { ignore: (name) => dockerIgnoreFiles.has(slash_1.default(name)) });
        return new Promise((resolve) => dockerode_1.dockerode
            .buildImage(tarStream, {
            dockerfile: options.dockerfileName,
            buildargs: options.buildArgs,
            t: options.imageName.toString(),
            labels: create_labels_1.createLabels(options.imageName),
            registryconfig: options.registryConfig,
            pull: options.pullPolicy.shouldPull() ? "any" : undefined,
        })
            .then((stream) => byline_1.default(stream))
            .then((stream) => {
            stream.setEncoding("utf-8");
            stream.on("data", (line) => logger_1.log.trace(`${options.imageName.toString()}: ${line}`));
            stream.on("end", () => resolve());
        }));
    }
    catch (err) {
        logger_1.log.error(`Failed to build image: ${err}`);
        throw err;
    }
});
exports.buildImage = buildImage;

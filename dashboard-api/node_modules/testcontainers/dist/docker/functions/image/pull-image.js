"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pullImage = void 0;
const logger_1 = require("../../../logger");
const pull_stream_parser_1 = require("../../pull-stream-parser");
const dockerode_1 = require("../../dockerode");
const image_exists_1 = require("./image-exists");
const pullImage = (options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if ((yield image_exists_1.imageExists(options.imageName)) && !options.force) {
            logger_1.log.debug(`Not pulling image as it already exists: ${options.imageName}`);
            return;
        }
        logger_1.log.info(`Pulling image: ${options.imageName}`);
        const stream = yield dockerode_1.dockerode.pull(options.imageName.toString(), { authconfig: options.authConfig });
        yield new pull_stream_parser_1.PullStreamParser(options.imageName, logger_1.log).consume(stream);
    }
    catch (err) {
        logger_1.log.error(`Failed to pull image "${options.imageName}": ${err}`);
        throw err;
    }
});
exports.pullImage = pullImage;

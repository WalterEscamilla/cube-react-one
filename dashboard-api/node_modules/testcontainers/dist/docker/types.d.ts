export declare type Id = string;
export declare type Host = string;
export declare type EnvKey = string;
export declare type EnvValue = string;
export declare type Env = {
    [key in EnvKey]: EnvValue;
};
export declare type Dir = string;
export declare type BindMode = "rw" | "ro";
export declare type BindMount = {
    source: Dir;
    target: Dir;
    bindMode: BindMode;
};
export declare type TmpFs = {
    [dir in Dir]: Dir;
};
export declare type HealthCheck = {
    test: string;
    interval?: number;
    timeout?: number;
    retries?: number;
    startPeriod?: number;
};
export declare type ExtraHost = {
    host: Host;
    ipAddress: string;
};
export declare type NetworkMode = string;
export declare type ContainerName = string;
export declare type AuthConfig = {
    username: string;
    password: string;
    registryAddress: string;
    email?: string;
};
export declare type RegistryConfig = {
    [registryAddress: string]: {
        username: string;
        password: string;
    };
};
export declare type BuildContext = string;
export declare type BuildArgs = {
    [key in EnvKey]: EnvValue;
};
export declare type StreamOutput = string;
export declare type ExitCode = number;
export declare type Command = string;
export declare type ExecResult = {
    output: StreamOutput;
    exitCode: ExitCode;
};
export declare type HealthCheckStatus = "none" | "starting" | "unhealthy" | "healthy";
export declare type NetworkSettings = {
    networkId: string;
    ipAddress: string;
};

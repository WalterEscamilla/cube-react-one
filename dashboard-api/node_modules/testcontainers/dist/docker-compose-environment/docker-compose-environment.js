"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerComposeEnvironment = void 0;
const bound_ports_1 = require("../bound-ports");
const container_name_resolver_1 = require("../docker-compose/functions/container-name-resolver");
const started_generic_container_1 = require("../generic-container/started-generic-container");
const logger_1 = require("../logger");
const port_check_1 = require("../port-check");
const wait_strategy_1 = require("../wait-strategy");
const reaper_1 = require("../reaper");
const uuid_1 = require("../uuid");
const list_containers_1 = require("../docker/functions/container/list-containers");
const get_container_1 = require("../docker/functions/container/get-container");
const docker_host_1 = require("../docker/docker-host");
const inspect_container_1 = require("../docker/functions/container/inspect-container");
const container_logs_1 = require("../docker/functions/container/container-logs");
const started_docker_compose_environment_1 = require("./started-docker-compose-environment");
const docker_compose_down_1 = require("../docker-compose/functions/docker-compose-down");
const docker_compose_up_1 = require("../docker-compose/functions/docker-compose-up");
class DockerComposeEnvironment {
    constructor(composeFilePath, composeFiles, uuid = new uuid_1.RandomUuid()) {
        this.build = false;
        this.env = {};
        this.waitStrategy = {};
        this.startupTimeout = 60000;
        this.projectName = `testcontainers-${uuid.nextUuid()}`;
        this.options = { filePath: composeFilePath, files: composeFiles, projectName: this.projectName };
    }
    withBuild() {
        this.build = true;
        return this;
    }
    withEnv(key, value) {
        this.env[key] = value;
        return this;
    }
    withWaitStrategy(containerName, waitStrategy) {
        this.waitStrategy[containerName] = waitStrategy;
        return this;
    }
    withStartupTimeout(startupTimeout) {
        this.startupTimeout = startupTimeout;
        return this;
    }
    up() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.info(`Starting DockerCompose environment ${this.projectName}`);
            (yield reaper_1.ReaperInstance.getInstance()).addProject(this.projectName);
            const commandOptions = [];
            if (this.build) {
                commandOptions.push("--build");
            }
            yield docker_compose_up_1.dockerComposeUp(Object.assign(Object.assign({}, this.options), { commandOptions, env: this.env }));
            const startedContainers = (yield list_containers_1.listContainers()).filter((container) => container.Labels["com.docker.compose.project"] === this.projectName);
            const startedContainerNames = startedContainers.reduce((containerNames, startedContainer) => [
                ...containerNames,
                startedContainer.Names.join(", "),
            ], []);
            logger_1.log.info(`Started the following containers: ${startedContainerNames.join(", ")}`);
            const startedGenericContainers = (yield Promise.all(startedContainers.map((startedContainer) => __awaiter(this, void 0, void 0, function* () {
                const container = yield get_container_1.getContainerById(startedContainer.Id);
                const containerName = container_name_resolver_1.resolveContainerName(this.projectName, startedContainer.Names[0]);
                (yield container_logs_1.containerLogs(container))
                    .on("data", (data) => logger_1.containerLog.trace(`${containerName}: ${data}`))
                    .on("err", (data) => logger_1.containerLog.error(`${containerName}: ${data}`));
                const inspectResult = yield inspect_container_1.inspectContainer(container);
                const boundPorts = this.getBoundPorts(startedContainer);
                try {
                    logger_1.log.info(`Waiting for container ${containerName} to be ready`);
                    yield this.waitForContainer(container, containerName, boundPorts);
                    logger_1.log.info(`Container ${containerName} is ready`);
                }
                catch (err) {
                    logger_1.log.error(`Container ${containerName} failed to be ready: ${err}`);
                    try {
                        yield docker_compose_down_1.dockerComposeDown(this.options);
                    }
                    catch (_a) {
                        logger_1.log.warn(`Failed to stop DockerCompose environment after failed up`);
                    }
                    throw err;
                }
                return new started_generic_container_1.StartedGenericContainer(container, yield docker_host_1.dockerHost, inspectResult, boundPorts, containerName);
            })))).reduce((map, startedGenericContainer) => {
                const containerName = startedGenericContainer.getName();
                return Object.assign(Object.assign({}, map), { [containerName]: startedGenericContainer });
            }, {});
            logger_1.log.info(`DockerCompose environment started: ${Object.keys(startedGenericContainers).join(", ")}`);
            return new started_docker_compose_environment_1.StartedDockerComposeEnvironment(startedGenericContainers, this.options);
        });
    }
    getBoundPorts(containerInfo) {
        const boundPorts = new bound_ports_1.BoundPorts();
        containerInfo.Ports.forEach((port) => boundPorts.setBinding(port.PrivatePort, port.PublicPort));
        return boundPorts;
    }
    waitForContainer(container, containerName, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            const waitStrategy = this.getWaitStrategy(yield docker_host_1.dockerHost, container, containerName);
            yield waitStrategy.withStartupTimeout(this.startupTimeout).waitUntilReady(container, boundPorts);
        });
    }
    getWaitStrategy(host, container, containerName) {
        if (this.waitStrategy[containerName]) {
            return this.waitStrategy[containerName];
        }
        else {
            const hostPortCheck = new port_check_1.HostPortCheck(host);
            const internalPortCheck = new port_check_1.InternalPortCheck(container);
            return new wait_strategy_1.HostPortWaitStrategy(hostPortCheck, internalPortCheck);
        }
    }
}
exports.DockerComposeEnvironment = DockerComposeEnvironment;

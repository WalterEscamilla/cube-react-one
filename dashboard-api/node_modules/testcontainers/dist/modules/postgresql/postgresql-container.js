"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedPostgreSqlContainer = exports.PostgreSqlContainer = void 0;
const generic_container_1 = require("../../generic-container/generic-container");
const uuid_1 = require("../../uuid");
const abstract_started_container_1 = require("../abstract-started-container");
class PostgreSqlContainer extends generic_container_1.GenericContainer {
    constructor(image = "postgres:13.3-alpine") {
        super(image);
        this.database = "test";
        this.username = new uuid_1.RandomUuid().nextUuid();
        this.password = new uuid_1.RandomUuid().nextUuid();
    }
    withDatabase(database) {
        this.database = database;
        return this;
    }
    withUsername(username) {
        this.username = username;
        return this;
    }
    withPassword(password) {
        this.password = password;
        return this;
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.withExposedPorts(5432)
                .withEnv("POSTGRES_DB", this.database)
                .withEnv("POSTGRES_USER", this.username)
                .withEnv("POSTGRES_PASSWORD", this.password)
                .withStartupTimeout(120000);
            return new StartedPostgreSqlContainer(yield _super.start.call(this), this.database, this.username, this.password);
        });
    }
}
exports.PostgreSqlContainer = PostgreSqlContainer;
class StartedPostgreSqlContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer, database, username, password) {
        super(startedTestContainer);
        this.database = database;
        this.username = username;
        this.password = password;
        this.port = startedTestContainer.getMappedPort(5432);
    }
    getPort() {
        return this.port;
    }
    getDatabase() {
        return this.database;
    }
    getUsername() {
        return this.username;
    }
    getPassword() {
        return this.password;
    }
}
exports.StartedPostgreSqlContainer = StartedPostgreSqlContainer;

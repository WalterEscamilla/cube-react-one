"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logSystemDiagnostics = void 0;
const logger_1 = require("./logger");
const dockerCompose = __importStar(require("docker-compose"));
const get_info_1 = require("./docker/functions/get-info");
const logSystemDiagnostics = () => __awaiter(void 0, void 0, void 0, function* () {
    const info = {
        node: getNodeInfo(),
        docker: yield get_info_1.getDockerInfo(),
        dockerCompose: yield getDockerComposeInfo(),
    };
    logger_1.log.debug(`System diagnostics: ${JSON.stringify(info, null, 2)}`);
});
exports.logSystemDiagnostics = logSystemDiagnostics;
const getNodeInfo = () => {
    return {
        version: process.version,
        architecture: process.arch,
        platform: process.platform,
    };
};
const getDockerComposeInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return {
            version: (yield dockerCompose.version()).data.version,
        };
    }
    catch (err) {
        logger_1.log.warn(`Unable to detect docker-compose version, is it installed? ${err}`);
        return undefined;
    }
});

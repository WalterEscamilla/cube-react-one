"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthConfig = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const fs_1 = require("fs");
const cred_helpers_1 = require("./cred-helpers");
const creds_store_1 = require("./creds-store");
const auths_1 = require("./auths");
const logger_1 = require("../logger");
const DEFAULT_REGISTRY = "https://index.docker.io/v1/";
const dockerConfigFile = path_1.default.resolve(os_1.default.homedir(), ".docker", "config.json");
const readDockerConfig = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!fs_1.existsSync(dockerConfigFile)) {
        return Promise.resolve({});
    }
    const buffer = yield fs_1.promises.readFile(dockerConfigFile);
    const object = JSON.parse(buffer.toString());
    return {
        credsStore: object.credsStore,
        credHelpers: object.credHelpers,
        auths: object.auths,
    };
});
const dockerConfig = readDockerConfig();
const registryAuthLocators = [new cred_helpers_1.CredHelpers(), new creds_store_1.CredsStore(), new auths_1.Auths()];
const getAuthConfig = (registry = DEFAULT_REGISTRY) => __awaiter(void 0, void 0, void 0, function* () {
    for (const registryAuthLocator of registryAuthLocators) {
        const authConfig = yield registryAuthLocator.getAuthConfig(registry, yield dockerConfig);
        if (authConfig) {
            logger_1.log.debug(`Found applicable registry auth locator for registry "${registry}": ${registryAuthLocator.getName()}`);
            return authConfig;
        }
    }
    logger_1.log.debug(`No registry auth locator found for registry: "${registry}"`);
    return undefined;
});
exports.getAuthConfig = getAuthConfig;

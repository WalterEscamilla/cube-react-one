import { BoundPorts } from "./bound-ports";
import { PortCheck } from "./port-check";
import Dockerode from "dockerode";
export interface WaitStrategy {
    waitUntilReady(container: Dockerode.Container, boundPorts: BoundPorts): Promise<void>;
    withStartupTimeout(startupTimeout: number): WaitStrategy;
}
declare abstract class AbstractWaitStrategy implements WaitStrategy {
    protected startupTimeout: number;
    abstract waitUntilReady(container: Dockerode.Container, boundPorts: BoundPorts): Promise<void>;
    withStartupTimeout(startupTimeout: number): WaitStrategy;
}
export declare class HostPortWaitStrategy extends AbstractWaitStrategy {
    private readonly hostPortCheck;
    private readonly internalPortCheck;
    constructor(hostPortCheck: PortCheck, internalPortCheck: PortCheck);
    waitUntilReady(container: Dockerode.Container, boundPorts: BoundPorts): Promise<void>;
    private waitForHostPorts;
    private waitForInternalPorts;
    private waitForPort;
}
export declare type Log = string;
export declare class LogWaitStrategy extends AbstractWaitStrategy {
    private readonly message;
    constructor(message: Log | RegExp);
    waitUntilReady(container: Dockerode.Container): Promise<void>;
}
export declare class HealthCheckWaitStrategy extends AbstractWaitStrategy {
    waitUntilReady(container: Dockerode.Container): Promise<void>;
}
export {};

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startBirdBoxFromCli = exports.startBirdBoxFromContainer = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const child_process_1 = require("child_process");
const http_proxy_1 = __importDefault(require("http-proxy"));
const testcontainers_1 = require("testcontainers");
const shared_1 = require("@cubejs-backend/shared");
const fs_extra_1 = __importDefault(require("fs-extra"));
const postgres_1 = require("./db/postgres");
const utils_1 = require("./utils");
async function startBirdBoxFromContainer(options) {
    var _a;
    if (process.env.TEST_CUBE_HOST) {
        const host = process.env.TEST_CUBE_HOST || 'localhost';
        const port = process.env.TEST_CUBE_PORT || '8888';
        return {
            stop: async () => {
                console.log('[Birdbox] Closed');
            },
            configuration: {
                playgroundUrl: `http://${host}:${port}`,
                apiUrl: `http://${host}:${port}/cubejs-api/v1`,
                wsUrl: `ws://${host}:${port}`,
            },
        };
    }
    const dc = new testcontainers_1.DockerComposeEnvironment(path_1.default.resolve(path_1.default.dirname(__filename), '../../birdbox-fixtures/'), `${options.name}.yml`);
    const env = await dc
        .withStartupTimeout(30 * 1000)
        .withEnv('BIRDBOX_CUBEJS_VERSION', process.env.BIRDBOX_CUBEJS_VERSION || 'latest')
        .up();
    const host = '127.0.0.1';
    const port = env.getContainer('birdbox-cube').getMappedPort(4000);
    const playgroundPort = (_a = process.env.TEST_PLAYGROUND_PORT) !== null && _a !== void 0 ? _a : port;
    let proxyServer = null;
    if (process.env.TEST_PLAYGROUND_PORT) {
        console.log(`[Birdbox] Creating a proxy server 4000->${port} for local testing`);
        // As local Playground proxies requests to the 4000 port
        proxyServer = http_proxy_1.default.createProxyServer({ target: `http://localhost:${port}` }).listen(4000);
        proxyServer.on('error', async (err, req, res) => {
            console.log('[Proxy Server] error:', err);
            if (!res.headersSent) {
                res.writeHead(500, { 'content-type': 'application/json' });
            }
            res.end(JSON.stringify({ error: err.message }));
        });
    }
    {
        console.log('[Birdbox] Executing load.sh script');
        const { output, exitCode } = await env.getContainer('birdbox-db').exec(['/scripts/load.sh']);
        if (exitCode === 0) {
            console.log('[Birdbox] Script load.sh finished successfully');
        }
        else {
            console.log(output);
            console.log(`[Birdbox] Script load.sh finished with error: ${exitCode}`);
            await env.down();
            process.exit(1);
        }
    }
    return {
        stop: async () => {
            console.log('[Birdbox] Closing');
            await env.down();
            proxyServer === null || proxyServer === void 0 ? void 0 : proxyServer.close();
            console.log('[Birdbox] Closed');
        },
        configuration: {
            playgroundUrl: `http://${host}:${playgroundPort}`,
            apiUrl: `http://${host}:${port}/cubejs-api/v1`,
            wsUrl: `ws://${host}:${port}`,
            env: {
                ...(process.env.TEST_PLAYGROUND_PORT ? { CUBEJS_DB_HOST: utils_1.getLocalHostnameByOs() } : null),
            },
        },
    };
}
exports.startBirdBoxFromContainer = startBirdBoxFromContainer;
async function startBirdBoxFromCli(options) {
    if (options.dbType !== 'postgresql') {
        throw new Error('Unsupported');
    }
    const db = await postgres_1.PostgresDBRunner.startContainer({
        volumes: [
            {
                source: path_1.default.join(__dirname, '..', '..', 'birdbox-fixtures', 'datasets'),
                target: '/data',
                bindMode: 'ro',
            },
            {
                source: path_1.default.join(__dirname, '..', '..', 'birdbox-fixtures', options.dbType, 'scripts'),
                target: '/scripts',
                bindMode: 'ro',
            },
        ],
    });
    {
        console.log('[Birdbox] Executing load.sh script');
        const { output, exitCode } = await db.exec(['/scripts/load.sh']);
        if (exitCode === 0) {
            console.log('[Birdbox] Script load.sh finished successfully');
        }
        else {
            console.log(output);
            console.log(`[Birdbox] Script load.sh finished with error: ${exitCode}`);
            await db.stop();
            process.exit(1);
        }
    }
    const testDir = path_1.default.join(process.cwd(), 'birdbox-test-project');
    if (fs_1.default.existsSync(path_1.default.join(testDir, '.env'))) {
        fs_1.default.unlinkSync(path_1.default.join(testDir, '.env'));
    }
    fs_extra_1.default.copySync(path_1.default.join(process.cwd(), 'birdbox-fixtures', options.dbType, 'schema'), path_1.default.join(testDir, 'schema'));
    const cli = child_process_1.spawn('npm', ['run', 'dev'], {
        cwd: testDir,
        shell: true,
        // Show output of Cube.js process in console
        stdio: ['pipe', 'pipe', 'pipe'],
        env: {
            ...process.env,
            CUBEJS_DB_TYPE: 'postgres',
            CUBEJS_DB_HOST: db.getHost(),
            CUBEJS_DB_PORT: `${db.getMappedPort(5432)}`,
            CUBEJS_DB_NAME: 'test',
            CUBEJS_DB_USER: 'test',
            CUBEJS_DB_PASS: 'test',
            CUBEJS_DEV_MODE: 'true',
            CUBEJS_WEB_SOCKETS: 'true',
            CUBEJS_API_SECRET: 'mysupersecret',
        },
    });
    // cli.stdout.on('data', (msg) => {
    //   console.log(msg.toString());
    // });
    cli.stderr.on('data', (msg) => {
        console.log(msg.toString());
    });
    // cli.on('exit', (code) => {
    //   throw new Error(
    //     `Cube.js exited with ${code}`
    //   );
    // });
    await shared_1.pausePromise(10 * 1000);
    return {
        stop: async () => {
            console.log('[Birdbox] Closing');
            await db.stop();
            console.log('[Birdbox] Done with DB');
            cli.kill();
            console.log('[Birdbox] Closed');
        },
        configuration: {
            playgroundUrl: 'http://127.0.0.1:4000',
            apiUrl: 'http://127.0.0.1:4000/cubejs-api/v1',
            wsUrl: 'ws://127.0.0.1:4000',
        },
    };
}
exports.startBirdBoxFromCli = startBirdBoxFromCli;
//# sourceMappingURL=birdbox.js.map
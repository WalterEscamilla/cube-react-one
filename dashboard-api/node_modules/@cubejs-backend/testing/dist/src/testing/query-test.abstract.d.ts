import { BaseDriver } from '@cubejs-backend/query-orchestrator';
import { BaseQuery } from '@cubejs-backend/schema-compiler';
import { StartedTestContainer } from 'testcontainers';
export declare const prepareCompiler: (content: any, options?: any) => {
    compiler: import("@cubejs-backend/schema-compiler/dist/src/compiler/DataSchemaCompiler").DataSchemaCompiler;
    metaTransformer: import("@cubejs-backend/schema-compiler/dist/src/compiler/CubeToMetaTransformer").CubeToMetaTransformer;
    cubeEvaluator: import("@cubejs-backend/schema-compiler/dist/src/compiler/CubeEvaluator").CubeEvaluator;
    contextEvaluator: import("@cubejs-backend/schema-compiler/dist/src/compiler/ContextEvaluator").ContextEvaluator;
    joinGraph: import("@cubejs-backend/schema-compiler/dist/src/compiler/JoinGraph").JoinGraph;
    compilerCache: import("@cubejs-backend/schema-compiler/dist/src/compiler/CompilerCache").CompilerCache;
    headCommitId: any;
};
export declare abstract class QueryTestAbstract<T extends BaseDriver> {
    abstract getQueryClass(): any;
    protected getQuery(a: any, b: any): BaseQuery;
    testRefreshKeyEveryDay(connection: T): Promise<void>;
    testRefreshKeyIncrementalWithUpdateWindow(connection: T): Promise<void>;
}
export interface QueryTestCaseOptions {
    name: string;
    connectionFactory: (container: StartedTestContainer) => BaseDriver;
    DbRunnerClass: any;
}
export declare function createQueryTestCase(test: QueryTestAbstract<any>, opts: QueryTestCaseOptions): void;
//# sourceMappingURL=query-test.abstract.d.ts.map
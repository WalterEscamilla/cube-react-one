"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubePropContextTranspiler = void 0;
const t = __importStar(require("@babel/types"));
const ramda_1 = __importDefault(require("ramda"));
class CubePropContextTranspiler {
    constructor(cubeSymbols, cubeDictionary) {
        this.cubeSymbols = cubeSymbols;
        this.cubeDictionary = cubeDictionary;
    }
    traverseObject() {
        return {
            CallExpression: (path) => {
                if (t.isIdentifier(path.node.callee)) {
                    const args = path.get('arguments');
                    if (path.node.callee.name === 'cube') {
                        if (args === null || args === void 0 ? void 0 : args[args.length - 1]) {
                            const cubeName = args[0].node.type === 'StringLiteral' && args[0].node.value ||
                                args[0].node.type === 'TemplateLiteral' &&
                                    args[0].node.quasis.length &&
                                    args[0].node.quasis[0].value.cooked;
                            args[args.length - 1].traverse(this.sqlAndReferencesFieldVisitor(cubeName));
                            args[args.length - 1].traverse(this.knownIdentifiersInjectVisitor('extends', name => this.cubeDictionary.resolveCube(name)));
                        }
                    }
                    else if (path.node.callee.name === 'context') {
                        args[args.length - 1].traverse(this.sqlAndReferencesFieldVisitor(null));
                    }
                }
            }
        };
    }
    transformObjectProperty(path, resolveSymbol) {
        const knownIds = this.collectKnownIdentifiers(resolveSymbol, path.get('value'));
        path.get('value').replaceWith(t.arrowFunctionExpression(knownIds.map(i => t.identifier(i)), 
        // @todo Replace any with assert expression
        path.node.value, false));
    }
    sqlAndReferencesFieldVisitor(cubeName) {
        // Unique fields that doesnt match any system fields in schema
        const simpleFields = /^(sql|measureReferences|rollups|dimensionReferences|segmentReferences|timeDimensionReference|timeDimension|rollupReferences|drillMembers|drillMemberReferences|contextMembers|columns)$/;
        // Not unique fields, example: measures exists in cube and pre-aggregation, which we should handle
        const complexFields = /^(dimensions|segments|measures)$/;
        const resolveSymbol = n => this.cubeSymbols.resolveSymbol(cubeName, n) || this.cubeSymbols.isCurrentCube(n);
        return {
            ObjectProperty: (path) => {
                var _a;
                if (path.node.key.type === 'Identifier') {
                    if (path.node.key.name.match(simpleFields)) {
                        this.transformObjectProperty(path, resolveSymbol);
                        return;
                    }
                    if (path.node.key.name.match(complexFields) && ((_a = path.parentPath) === null || _a === void 0 ? void 0 : _a.parent.type) !== 'CallExpression') {
                        this.transformObjectProperty(path, resolveSymbol);
                    }
                }
            }
        };
    }
    knownIdentifiersInjectVisitor(field, resolveSymbol) {
        return {
            ObjectProperty: (path) => {
                if (path.node.key.type === 'Identifier' && path.node.key.name.match(field)) {
                    this.transformObjectProperty(path, resolveSymbol);
                }
            }
        };
    }
    collectKnownIdentifiers(resolveSymbol, path) {
        const identifiers = [];
        if (path.node.type === 'Identifier') {
            this.matchAndPushIdentifier(path, resolveSymbol, identifiers);
        }
        path.traverse({
            Identifier: (p) => {
                this.matchAndPushIdentifier(p, resolveSymbol, identifiers);
            }
        });
        return ramda_1.default.uniq(identifiers);
    }
    matchAndPushIdentifier(path, resolveSymbol, identifiers) {
        if ((!path.parent ||
            (path.parent.type !== 'MemberExpression' || path.parent.type === 'MemberExpression' && path.key !== 'property')) &&
            resolveSymbol(path.node.name)) {
            identifiers.push(path.node.name);
        }
    }
}
exports.CubePropContextTranspiler = CubePropContextTranspiler;
//# sourceMappingURL=CubePropContextTranspiler.js.map